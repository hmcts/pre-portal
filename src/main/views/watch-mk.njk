{% extends "template.njk" %}

{% block pageTitle %}Recording {{ recording.id }} - PRE Portal{% endblock %}

{% block head %}
  {% include "webpack/css.njk" %}
  <script type="text/javascript" src="/assets/js/mkplayer.js"></script>
  <link rel="stylesheet" href="/assets/css/mkplayer-ui.css">
  <style>
    .custom-controls {
      display: flex;
      align-items: center;
      justify-content: center;
      margin-top: 10px;
    }
    .volume-control {
      display: flex;
      align-items: center;
    }
    #volumeSlider {
      width: 100px;
      margin-left: 5px;
    }
  </style>
{% endblock %}

{% block beforeContent %}
  {{
    govukBackLink({
      "href": "javascript:history.back()"
    })
  }}
{% endblock %}

{% block content %}
  <div class="govuk-notification-banner" role="region" aria-labelledby="govuk-notification-banner-title" data-module="govuk-notification-banner">
    <div class="govuk-notification-banner__header">
      <h2 class="govuk-notification-banner__title" id="govuk-notification-banner-title">
        Note
      </h2>
    </div>
    <div class="govuk-notification-banner__content">
      <p class="govuk-notification-banner__heading">
        This page is using the new MediaKind API and video player.
      </p>
    </div>
  </div>

  <h1 class="govuk-heading-xl">Case Ref: {{ recording.case_reference }}</h1>

  <div id="videoError" class="govuk-error-summary" data-module="govuk-error-summary" style="display: none;">
    <div role="alert">
      <h2 class="govuk-error-summary__title">
        There is a problem
      </h2>
      <div class="govuk-error-summary__body">
        <ul class="govuk-list govuk-error-summary__list">
          <li class="govuk-error-message">
            The recording is not currently available
          </li>
        </ul>
      </div>
    </div>
  </div>

  <div id="videoWrapper" class="govuk-!-margin-bottom-2 video-wrapper">
    <div id="video-container"></div>
    <div class="custom-controls">
      <div class="volume-control">
        <label for="volumeSlider">Volume:</label>
        <input type="range" id="volumeSlider" min="0" max="100" value="50">
      </div>
    </div>
  </div>

  <div class="govuk-warning-text">
    <span class="govuk-warning-text__icon" aria-hidden="true">!</span>
    <strong class="govuk-warning-text__text">
      <span class="govuk-warning-text__assistive">Please note</span>
      playback is preferred on non-mobile devices. If possible, please use a
      preferred device.
    </strong>
  </div>

  <h2 class="govuk-heading-m">Recording details</h2>
  <dl class="govuk-summary-list govuk-!-margin-bottom-9">
    <div class="govuk-summary-list__row">
      <dt class="govuk-summary-list__key" data-testid="summary-title-date">
        Date
      </dt>
      <dd
        class="govuk-summary-list__value"
        data-testid="summary-value-date">
        {{ recording.capture_session.started_at | formatDate }}
      </dd>
    </div>
    <div class="govuk-summary-list__row">
      <dt class="govuk-summary-list__key" data-testid="summary-title-uid">
        Recording UID
      </dt>
      <dd class="govuk-summary-list__value" data-testid="summary-value-uid">
        {{ recording.id }}
      </dd>
    </div>
    <div class="govuk-summary-list__row">
      <dt
        class="govuk-summary-list__key"
        data-testid="summary-title-version">
        Recording Version
      </dt>
      <dd
        class="govuk-summary-list__value"
        data-testid="summary-value-version">
        {{ recording.version }}
      </dd>
    </div>
    <div class="govuk-summary-list__row">
      <dt class="govuk-summary-list__key" data-testid="summary-title-court">
        Court
      </dt>
      <dd
        class="govuk-summary-list__value"
        data-testid="summary-value-court">
        {{ recording.capture_session.court_name }}
      </dd>
    </div>
    <div class="govuk-summary-list__row">
      <dt
        class="govuk-summary-list__key"
        data-testid="summary-title-witness">
        Witness
      </dt>

        <dd
          class="govuk-summary-list__value"
          data-testid="summary-value-witness">
          {% for participant in recording.participants %}
            {% if participant.participant_type == "WITNESS" %}
              {{ participant.first_name }} {{ participant.last_name }}<br />
            {% endif %}
          {% endfor %}
        </dd>
    </div>
    <div class="govuk-summary-list__row">
      <dt
        class="govuk-summary-list__key"
        data-testid="summary-title-defendants">
        Defendants
      </dt>
        <dd
          class="govuk-summary-list__value"
          data-testid="summary-value-defendants">
          {% for participant in recording.participants %}
            {% if participant.participant_type == "DEFENDANT" %}
              {{ participant.first_name }} {{ participant.last_name }}<br />
            {% endif %}
          {% endfor %}
        </dd>
    </div>
  </dl>
  <script type="text/javascript" crossorigin="anonymous" data-testid="recording-video-script">
    const videoContainer = document.getElementById("video-container");
    const volumeSlider = document.getElementById("volumeSlider");
    var videoError = document.getElementById("videoError");
    
    const playerConfig = {
        key: "d0167b1c-9767-4287-9ddc-e0fa09d31e02",
        ui: true,
        playback: {
            muted: false,
            autoplay: false,
            preferredTech: [{ player: 'html5', streaming: 'hls'}]
        },
        controls: {
        volume: {
          enabled: true,
          vertical: true
        },
      }
    };

    const sourceConfig = {
      title: "Test",
      description: "Test",
      hls: "https://mkplayer.azureedge.net/$web/streams/slate/hls/index.m3u8"
    };

    let player;

    function initializePlayer() {
      player = new mkplayer.MKPlayer(videoContainer, playerConfig);
      player.load(sourceConfig);
      console.log('Initialising player...');
    }

    function setupEventListeners() {
      player.on("sourceloaded", onSourceLoaded);
      player.on("error", onError);
      player.on("volumechange", onVolumeChange);

      volumeSlider.addEventListener('input', adjustVolume);
    }
    
    function onSourceLoaded() {
      console.log('Player loaded');
      const initialVolume = volumeSlider.value / 100;
      player.setVolume(initialVolume);
      console.log('Initial vol set:', initialVolume);
    }

    function onError(error) {
      console.error('Player error:', error);
      videoError.style.display = 'block';
    }

    function onVolumeChange(data) {
      console.log('Volume change:', data.volume);
      volumeSlider.value = data.volume * 100;
    }

    function adjustVolume(event) {
      const volume = event.target.value / 100;
      player.setVolume(volume);
      console.log('Player vol set:', player.getVolume());
    }

    window.onload = function() {
      initializePlayer();
      setupEventListeners();
    };
  </script>
{% endblock %}
